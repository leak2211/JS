let previousMouseX, previousMouseY;
let canvas, selectArea;
let selectMode = 0;
let shapeButton, clearButton, penButton, backButton, widthSelect, colorSelect, shapeSelect, saveButton;
let forShape = false; 
let currentShape = []; 

const colorMap = {
  'üî¥': 'red',
  'üîµ': 'blue',
  'üü¢': 'green',
  'üü°': 'yellow',
  '‚ö´': 'black',
  '‚ö™': 'white',
  'üü£': 'purple',
  'üü†': 'orange'
};

function setup() {
  canvas = createCanvas(800, 800);
  background(200); //—Ö–æ–ª—Å—Ç
  noFill();
  stroke(0);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
  penButton = createButton('Pen').position(810, 80);  // —Ä—É—á–∫–∞
  eraserButton = createButton('Eraser').position(810, 125);  // –ª–∞—Å—Ç–∏–∫
  backButton = createButton('Background').position(810, 150); // —Ñ–æ–Ω
  widthSelect = createInput('10').position(855, 80).size(30);  // –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
  colorSelect = createColorSelect().position(810, 105); // —Å–∏–ª–µ–∫—Ç–æ—Ä
  shapeButton = createButton('Shape').position(810, 175); // –§–ò–ì–£–†–´
  clearButton = createButton('Clear').position(810, 200); // –û–ß–ò–°–¢–ö–ê
  saveButton = createButton('Save').position(810, 224);  //  —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  penButton.mousePressed(() => selectMode = 0); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É—á–∫–∏
  backButton.mousePressed(() => selectMode = 2);  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É—á–∫–∏
  clearButton.mousePressed(() => background(200));  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ñ–æ–Ω
  shapeButton.mousePressed(() => showShapeSelect());     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ñ–∏–≥—É—Ä—ã 
  eraserButton.mousePressed(() => selectMode = 3);    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ª–∞—Å—Ç–∏–∫–∞ 
  saveButton.mousePressed(saveCanvasImage);  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
}

function draw() {
  let pickedColor = colorSelect.selected();
  let color = colorMap[pickedColor] || 'black';

  if (mouseIsPressed) {
    if (selectMode === 0) {
      drawFreehand(color);
    } else if (selectMode === 1) {
      drawShape(color);
    } else if (selectMode === 2) {
      fillBackground(color);
    }
    else if (selectMode === 3) {
      eraserFreehand(200);
    }
  }
}

function eraserFreehand(color) {
  strokeWeight(widthSelect.value());
  stroke(200);
  line(previousMouseX, previousMouseY, mouseX, mouseY);
  previousMouseX = mouseX;
  previousMouseY = mouseY;
}

function mouseReleased() {
  previousMouseX = previousMouseY = undefined;
  forShape = false;  // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∏ –≤—ã–±–æ—Ä–∞

function createColorSelect() {
  let select = createSelect();
  Object.keys(colorMap).forEach(option => select.option(option));
  select.selected('üî¥');
  return select;
}

function drawFreehand(color) {
  strokeWeight(widthSelect.value());
  stroke(color);
  line(previousMouseX, previousMouseY, mouseX, mouseY);
  previousMouseX = mouseX;
  previousMouseY = mouseY;
}

function drawShape(color) {
  fill(color);
  noStroke();
  let shape = shapeSelect.selected();

  if (shape === '‚¨õ') {
    drawRectangle();
  } else if (shape === '‚ö´Ô∏è') {
    drawEllipse();
  } else if (shape === 'üî∫') {  
    drawTriangle();
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫—Ä—É–≥–∞
function drawRectangle() {
  if (forShape) {
    rect(previousMouseX, previousMouseY, mouseX - previousMouseX, mouseY - previousMouseY);
  } else {
    previousMouseX = mouseX;
    previousMouseY = mouseY;
    forShape = true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawEllipse() {
  if (forShape) {
    ellipse(previousMouseX, previousMouseY, mouseX - previousMouseX, mouseY - previousMouseY);
  } else {
    previousMouseX = mouseX;
    previousMouseY = mouseY;
    forShape = true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawTriangle() {
  if (forShape) {
    let x1 = previousMouseX;
    let y1 = previousMouseY;
    let x2 = mouseX;
    let y2 = mouseY;
    let x3 = (previousMouseX + mouseX) / 2;  // –°–µ—Ä–µ–¥–∏–Ω–∞ –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–æ–π
    let y3 = previousMouseY - (mouseY - previousMouseY);  // –í—ã—Å–æ—Ç–∞ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞

    triangle(x1, y1, x2, y2, x3, y3);  // –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
  } else {
    previousMouseX = mouseX;
    previousMouseY = mouseY;
    forShape = true;
  }
}

function fillBackground(color) {
  background(color);
  selectMode = 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
}

function showShapeSelect() {
  selectMode = 1;
  shapeSelect = createSelect().position(870, 175);
  shapeSelect.option('‚¨õ');  // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
  shapeSelect.option('‚ö´Ô∏è'); // –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å
  shapeSelect.option('üî∫'); // –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function saveCanvasImage() {
  saveCanvas(canvas, 'my_drawing', 'png');  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
}
